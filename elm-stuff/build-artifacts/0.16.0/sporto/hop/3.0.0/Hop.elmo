Elm.Hop = Elm.Hop || {};
Elm.Hop.make = function (_elm) {
   "use strict";
   _elm.Hop = _elm.Hop || {};
   if (_elm.Hop.values) return _elm.Hop.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $History = Elm.History.make(_elm),
   $Hop$Matchers = Elm.Hop.Matchers.make(_elm),
   $Hop$Types = Elm.Hop.Types.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var routeTagAndQuerySignal = function (config) {
      var resolve = function (location) {    return A3($Hop$Matchers.matchLocation,config.matchers,config.notFound,location);};
      return A2($Signal.map,resolve,$History.hash);
   };
   var $new = function (config) {    return {run: $History.setPath(""),signal: routeTagAndQuerySignal(config)};};
   return _elm.Hop.values = {_op: _op,$new: $new};
};